package main

// 给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。
//
// 比方说，给你 num = 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22, 93]，[23, 92]，[223, 9] 和 [2, 329] 。
// 请你返回可以得到的 new1 和 new2 的 最小 和。
func minimumSum(num int) int {
	a := make([]int, 4)
	for i := 0; i < 4; i++ {
		a[i] = num % 10
		num /= 10
	}

	// 修正排序：冒泡排序
	for i := 0; i < 3; i++ { // 只需3轮，因为最后一次自动有序
		for j := i + 1; j < 4; j++ { // 从i+1开始，避免重复比较
			if a[i] > a[j] {
				a[i], a[j] = a[j], a[i]
			}
		}
	}

	new1 := a[0]*10 + a[2] // 最小值作十位，第三小作个位
	new2 := a[1]*10 + a[3] // 次小值作十位，最大值作个位
	return new1 + new2
} //取出每一位放入数组，对数组a[4]排序，将最低两个当十位，得到数组位a[0]*10
// +a[2]+a[1]+a[3]
func main() {

}
